"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Api
 * Api principal do sistema Sofia.
 *
 * The version of the OpenAPI document: 0.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceSubscriptionsApiAxiosParamCreator = exports.WorkspaceJoinRequestsApi = exports.WorkspaceJoinRequestsApiFactory = exports.WorkspaceJoinRequestsApiFp = exports.WorkspaceJoinRequestsApiAxiosParamCreator = exports.SubscriptionProductsApi = exports.SubscriptionProductsApiFactory = exports.SubscriptionProductsApiFp = exports.SubscriptionProductsApiAxiosParamCreator = exports.StripeApi = exports.StripeApiFactory = exports.StripeApiFp = exports.StripeApiAxiosParamCreator = exports.ProfilesApi = exports.ProfilesApiFactory = exports.ProfilesApiFp = exports.ProfilesApiAxiosParamCreator = exports.PluggyApi = exports.PluggyApiFactory = exports.PluggyApiFp = exports.PluggyApiAxiosParamCreator = exports.BankTransactionsApi = exports.BankTransactionsApiFactory = exports.BankTransactionsApiFp = exports.BankTransactionsApiAxiosParamCreator = exports.BankTransactionCostCentersApi = exports.BankTransactionCostCentersApiFactory = exports.BankTransactionCostCentersApiFp = exports.BankTransactionCostCentersApiAxiosParamCreator = exports.BankTransactionCategoriesApi = exports.BankTransactionCategoriesApiFactory = exports.BankTransactionCategoriesApiFp = exports.BankTransactionCategoriesApiAxiosParamCreator = exports.BankConnectionsApi = exports.BankConnectionsApiFactory = exports.BankConnectionsApiFp = exports.BankConnectionsApiAxiosParamCreator = exports.BankAccountsApi = exports.BankAccountsApiFactory = exports.BankAccountsApiFp = exports.BankAccountsApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.WorkspaceSubscriptionEntityPaymentSystemEnum = exports.WorkspaceSubscriptionEntityStatusEnum = exports.BankTransactionEntityStatusEnum = exports.BankTransactionEntityTypeEnum = exports.BankTransactionEntityProviderEnum = void 0;
exports.WorkspacesApi = exports.WorkspacesApiFactory = exports.WorkspacesApiFp = exports.WorkspacesApiAxiosParamCreator = exports.WorkspaceSubscriptionsApi = exports.WorkspaceSubscriptionsApiFactory = exports.WorkspaceSubscriptionsApiFp = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.BankTransactionEntityProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankTransactionEntityTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
};
exports.BankTransactionEntityStatusEnum = {
    Pending: 'PENDING',
    Posted: 'POSTED'
};
exports.WorkspaceSubscriptionEntityStatusEnum = {
    Active: 'ACTIVE',
    NotActive: 'NOT_ACTIVE',
    Trial: 'TRIAL'
};
exports.WorkspaceSubscriptionEntityPaymentSystemEnum = {
    Stripe: 'STRIPE'
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
var AuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckEmailInUse: function (checkEmailInUseRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'checkEmailInUseRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerCheckEmailInUse', 'checkEmailInUseRequestDto', checkEmailInUseRequestDto);
                    localVarPath = "/auth/check-email-in-use";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(checkEmailInUseRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'refreshRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerRefresh', 'refreshRequestDto', refreshRequestDto);
                    localVarPath = "/auth/refresh";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refreshRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSendEmailVerificationCode: function (sendEmailVerificationCodeRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'sendEmailVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerSendEmailVerificationCode', 'sendEmailVerificationCodeRequestDto', sendEmailVerificationCodeRequestDto);
                    localVarPath = "/auth/sign-up/email-verification-code";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sendEmailVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmailPassword: function (signInWithEmailPasswordRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'signInWithEmailPasswordRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerSignInWithEmailPassword', 'signInWithEmailPasswordRequestDto', signInWithEmailPasswordRequestDto);
                    localVarPath = "/auth/sign-in/email-password";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signInWithEmailPasswordRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmailPassword: function (signUpWithEmailPasswordRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'signUpWithEmailPasswordRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerSignUpWithEmailPassword', 'signUpWithEmailPasswordRequestDto', signUpWithEmailPasswordRequestDto);
                    localVarPath = "/auth/sign-up/email-password";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signUpWithEmailPasswordRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
var AuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckEmailInUse: function (checkEmailInUseRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerCheckEmailInUse(checkEmailInUseRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerCheckEmailInUse']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerRefresh(refreshRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerRefresh']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSendEmailVerificationCode: function (sendEmailVerificationCodeRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerSendEmailVerificationCode(sendEmailVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerSendEmailVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmailPassword: function (signInWithEmailPasswordRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerSignInWithEmailPassword(signInWithEmailPasswordRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerSignInWithEmailPassword']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmailPassword: function (signUpWithEmailPasswordRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerSignUpWithEmailPassword(signUpWithEmailPasswordRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerSignUpWithEmailPassword']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
var AuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckEmailInUse: function (checkEmailInUseRequestDto, options) {
            return localVarFp.authControllerCheckEmailInUse(checkEmailInUseRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto, options) {
            return localVarFp.authControllerRefresh(refreshRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSendEmailVerificationCode: function (sendEmailVerificationCodeRequestDto, options) {
            return localVarFp.authControllerSendEmailVerificationCode(sendEmailVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmailPassword: function (signInWithEmailPasswordRequestDto, options) {
            return localVarFp.authControllerSignInWithEmailPassword(signInWithEmailPasswordRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmailPassword: function (signUpWithEmailPasswordRequestDto, options) {
            return localVarFp.authControllerSignUpWithEmailPassword(signUpWithEmailPasswordRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerCheckEmailInUse = function (checkEmailInUseRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerCheckEmailInUse(checkEmailInUseRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerRefresh = function (refreshRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerRefresh(refreshRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerSendEmailVerificationCode = function (sendEmailVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerSendEmailVerificationCode(sendEmailVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerSignInWithEmailPassword = function (signInWithEmailPasswordRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerSignInWithEmailPassword(signInWithEmailPasswordRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerSignUpWithEmailPassword = function (signUpWithEmailPasswordRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerSignUpWithEmailPassword(signUpWithEmailPasswordRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
var BankAccountsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivateBankAccount: function (bankAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerActivateBankAccount', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}/activate"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdateBankAccount: function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateOrUpdateBankAccount', 'workspaceId', workspaceId);
                    // verify required parameter 'createOrUpdateBankAccountRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateOrUpdateBankAccount', 'createOrUpdateBankAccountRequestDto', createOrUpdateBankAccountRequestDto);
                    localVarPath = "/workspaces/{workspaceId}/bank/accounts"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankAccountRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: function (workspaceId, enabled, types, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/accounts/balance-report"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisableBankAccount: function (bankAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerDisableBankAccount', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}/disable"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} bankConnectionId
         * @param {boolean} enabled
         * @param {string} types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchConnectionBankAccounts: function (workspaceId, bankConnectionId, enabled, types, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'workspaceId', workspaceId);
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'bankConnectionId', bankConnectionId);
                    // verify required parameter 'enabled' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'enabled', enabled);
                    // verify required parameter 'types' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'types', types);
                    localVarPath = "/workspaces/{workspaceId}/bank/connections/{bankConnectionId}/accounts"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)))
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchWorkspaceBankAccounts: function (workspaceId, enabled, types, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchWorkspaceBankAccounts', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/accounts"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccountDetails: function (bankAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerGetBankAccountDetails', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankAccountsApiAxiosParamCreator = BankAccountsApiAxiosParamCreator;
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
var BankAccountsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankAccountsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivateBankAccount: function (bankAccountId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerActivateBankAccount(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerActivateBankAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdateBankAccount: function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerCreateOrUpdateBankAccount(workspaceId, createOrUpdateBankAccountRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerCreateOrUpdateBankAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: function (workspaceId, enabled, types, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisableBankAccount: function (bankAccountId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerDisableBankAccount(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerDisableBankAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} bankConnectionId
         * @param {boolean} enabled
         * @param {string} types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchConnectionBankAccounts: function (workspaceId, bankConnectionId, enabled, types, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerFetchConnectionBankAccounts(workspaceId, bankConnectionId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerFetchConnectionBankAccounts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchWorkspaceBankAccounts: function (workspaceId, enabled, types, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerFetchWorkspaceBankAccounts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccountDetails: function (bankAccountId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerGetBankAccountDetails(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerGetBankAccountDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankAccountsApiFp = BankAccountsApiFp;
/**
 * BankAccountsApi - factory interface
 * @export
 */
var BankAccountsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankAccountsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivateBankAccount: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerActivateBankAccount(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdateBankAccount: function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
            return localVarFp.bankAccountsControllerCreateOrUpdateBankAccount(workspaceId, createOrUpdateBankAccountRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: function (workspaceId, enabled, types, options) {
            return localVarFp.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisableBankAccount: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerDisableBankAccount(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} bankConnectionId
         * @param {boolean} enabled
         * @param {string} types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchConnectionBankAccounts: function (workspaceId, bankConnectionId, enabled, types, options) {
            return localVarFp.bankAccountsControllerFetchConnectionBankAccounts(workspaceId, bankConnectionId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchWorkspaceBankAccounts: function (workspaceId, enabled, types, options) {
            return localVarFp.bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccountDetails: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerGetBankAccountDetails(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankAccountsApiFactory = BankAccountsApiFactory;
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
var BankAccountsApi = /** @class */ (function (_super) {
    __extends(BankAccountsApi, _super);
    function BankAccountsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerActivateBankAccount = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerActivateBankAccount(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerCreateOrUpdateBankAccount = function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerCreateOrUpdateBankAccount(workspaceId, createOrUpdateBankAccountRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport = function (workspaceId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerDisableBankAccount = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerDisableBankAccount(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerFetchConnectionBankAccounts = function (workspaceId, bankConnectionId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerFetchConnectionBankAccounts(workspaceId, bankConnectionId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerFetchWorkspaceBankAccounts = function (workspaceId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerGetBankAccountDetails = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerGetBankAccountDetails(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankAccountsApi;
}(base_1.BaseAPI));
exports.BankAccountsApi = BankAccountsApi;
/**
 * BankConnectionsApi - axios parameter creator
 * @export
 */
var BankConnectionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivateBankConnection: function (bankConnectionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerActivateBankConnection', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}/activate"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdateBankConnection: function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerCreateOrUpdateBankConnection', 'workspaceId', workspaceId);
                    // verify required parameter 'createOrUpdateBankConnectionRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerCreateOrUpdateBankConnection', 'createOrUpdateBankConnectionRequestDto', createOrUpdateBankConnectionRequestDto);
                    localVarPath = "/workspaces/{workspaceId}/bank/connections"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankConnectionRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisableBankConnection: function (bankConnectionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerDisableBankConnection', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}/disable"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerFetchUserBankConnections: function (workspaceId, enabled, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerFetchUserBankConnections', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/connections"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetBankConnectionDetails: function (bankConnectionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerGetBankConnectionDetails', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankConnectionsApiAxiosParamCreator = BankConnectionsApiAxiosParamCreator;
/**
 * BankConnectionsApi - functional programming interface
 * @export
 */
var BankConnectionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankConnectionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivateBankConnection: function (bankConnectionId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerActivateBankConnection(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerActivateBankConnection']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdateBankConnection: function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId, createOrUpdateBankConnectionRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerCreateOrUpdateBankConnection']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisableBankConnection: function (bankConnectionId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerDisableBankConnection(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerDisableBankConnection']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerFetchUserBankConnections: function (workspaceId, enabled, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerFetchUserBankConnections(workspaceId, enabled, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerFetchUserBankConnections']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetBankConnectionDetails: function (bankConnectionId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerGetBankConnectionDetails(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerGetBankConnectionDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankConnectionsApiFp = BankConnectionsApiFp;
/**
 * BankConnectionsApi - factory interface
 * @export
 */
var BankConnectionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankConnectionsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivateBankConnection: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerActivateBankConnection(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdateBankConnection: function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
            return localVarFp.bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId, createOrUpdateBankConnectionRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisableBankConnection: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerDisableBankConnection(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerFetchUserBankConnections: function (workspaceId, enabled, options) {
            return localVarFp.bankConnectionsControllerFetchUserBankConnections(workspaceId, enabled, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetBankConnectionDetails: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerGetBankConnectionDetails(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankConnectionsApiFactory = BankConnectionsApiFactory;
/**
 * BankConnectionsApi - object-oriented interface
 * @export
 * @class BankConnectionsApi
 * @extends {BaseAPI}
 */
var BankConnectionsApi = /** @class */ (function (_super) {
    __extends(BankConnectionsApi, _super);
    function BankConnectionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerActivateBankConnection = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerActivateBankConnection(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerCreateOrUpdateBankConnection = function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId, createOrUpdateBankConnectionRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerDisableBankConnection = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerDisableBankConnection(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerFetchUserBankConnections = function (workspaceId, enabled, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerFetchUserBankConnections(workspaceId, enabled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerGetBankConnectionDetails = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerGetBankConnectionDetails(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankConnectionsApi;
}(base_1.BaseAPI));
exports.BankConnectionsApi = BankConnectionsApi;
/**
 * BankTransactionCategoriesApi - axios parameter creator
 * @export
 */
var BankTransactionCategoriesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerGetBankTransactionCategories: function (workspaceId, onlyLeafs, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionCategoriesControllerGetBankTransactionCategories', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/categories"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (onlyLeafs !== undefined) {
                        localVarQueryParameter['onlyLeafs'] = onlyLeafs;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionCategoriesApiAxiosParamCreator = BankTransactionCategoriesApiAxiosParamCreator;
/**
 * BankTransactionCategoriesApi - functional programming interface
 * @export
 */
var BankTransactionCategoriesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionCategoriesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerGetBankTransactionCategories: function (workspaceId, onlyLeafs, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId, onlyLeafs, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionCategoriesApi.bankTransactionCategoriesControllerGetBankTransactionCategories']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionCategoriesApiFp = BankTransactionCategoriesApiFp;
/**
 * BankTransactionCategoriesApi - factory interface
 * @export
 */
var BankTransactionCategoriesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionCategoriesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerGetBankTransactionCategories: function (workspaceId, onlyLeafs, options) {
            return localVarFp.bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId, onlyLeafs, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionCategoriesApiFactory = BankTransactionCategoriesApiFactory;
/**
 * BankTransactionCategoriesApi - object-oriented interface
 * @export
 * @class BankTransactionCategoriesApi
 * @extends {BaseAPI}
 */
var BankTransactionCategoriesApi = /** @class */ (function (_super) {
    __extends(BankTransactionCategoriesApi, _super);
    function BankTransactionCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCategoriesApi
     */
    BankTransactionCategoriesApi.prototype.bankTransactionCategoriesControllerGetBankTransactionCategories = function (workspaceId, onlyLeafs, options) {
        var _this = this;
        return (0, exports.BankTransactionCategoriesApiFp)(this.configuration).bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId, onlyLeafs, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionCategoriesApi;
}(base_1.BaseAPI));
exports.BankTransactionCategoriesApi = BankTransactionCategoriesApi;
/**
 * BankTransactionCostCentersApi - axios parameter creator
 * @export
 */
var BankTransactionCostCentersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCostCentersControllerCreateCostCenter: function (workspaceId, createBankTransactionCostCenterRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionCostCentersControllerCreateCostCenter', 'workspaceId', workspaceId);
                    // verify required parameter 'createBankTransactionCostCenterRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionCostCentersControllerCreateCostCenter', 'createBankTransactionCostCenterRequestDto', createBankTransactionCostCenterRequestDto);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/cost-centers"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createBankTransactionCostCenterRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCostCentersControllerListCostCenters: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionCostCentersControllerListCostCenters', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/cost-centers"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionCostCentersApiAxiosParamCreator = BankTransactionCostCentersApiAxiosParamCreator;
/**
 * BankTransactionCostCentersApi - functional programming interface
 * @export
 */
var BankTransactionCostCentersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionCostCentersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCostCentersControllerCreateCostCenter: function (workspaceId, createBankTransactionCostCenterRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionCostCentersControllerCreateCostCenter(workspaceId, createBankTransactionCostCenterRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionCostCentersApi.bankTransactionCostCentersControllerCreateCostCenter']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCostCentersControllerListCostCenters: function (workspaceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionCostCentersControllerListCostCenters(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionCostCentersApi.bankTransactionCostCentersControllerListCostCenters']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionCostCentersApiFp = BankTransactionCostCentersApiFp;
/**
 * BankTransactionCostCentersApi - factory interface
 * @export
 */
var BankTransactionCostCentersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionCostCentersApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCostCentersControllerCreateCostCenter: function (workspaceId, createBankTransactionCostCenterRequestDto, options) {
            return localVarFp.bankTransactionCostCentersControllerCreateCostCenter(workspaceId, createBankTransactionCostCenterRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCostCentersControllerListCostCenters: function (workspaceId, options) {
            return localVarFp.bankTransactionCostCentersControllerListCostCenters(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionCostCentersApiFactory = BankTransactionCostCentersApiFactory;
/**
 * BankTransactionCostCentersApi - object-oriented interface
 * @export
 * @class BankTransactionCostCentersApi
 * @extends {BaseAPI}
 */
var BankTransactionCostCentersApi = /** @class */ (function (_super) {
    __extends(BankTransactionCostCentersApi, _super);
    function BankTransactionCostCentersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCostCentersApi
     */
    BankTransactionCostCentersApi.prototype.bankTransactionCostCentersControllerCreateCostCenter = function (workspaceId, createBankTransactionCostCenterRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionCostCentersApiFp)(this.configuration).bankTransactionCostCentersControllerCreateCostCenter(workspaceId, createBankTransactionCostCenterRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCostCentersApi
     */
    BankTransactionCostCentersApi.prototype.bankTransactionCostCentersControllerListCostCenters = function (workspaceId, options) {
        var _this = this;
        return (0, exports.BankTransactionCostCentersApiFp)(this.configuration).bankTransactionCostCentersControllerListCostCenters(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionCostCentersApi;
}(base_1.BaseAPI));
exports.BankTransactionCostCentersApi = BankTransactionCostCentersApi;
/**
 * BankTransactionsApi - axios parameter creator
 * @export
 */
var BankTransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'createOrUpdateBankTransactionsInBulkRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk', 'createOrUpdateBankTransactionsInBulkRequestDto', createOrUpdateBankTransactionsInBulkRequestDto);
                    localVarPath = "/bank/transactions/bulk";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankTransactionsInBulkRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [costCenterIds]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactions: function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, costCenterIds, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactions', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (costCenterIds !== undefined) {
                        localVarQueryParameter['costCenterIds'] = costCenterIds;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    if (showIgnored !== undefined) {
                        localVarQueryParameter['showIgnored'] = showIgnored;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsNotConfirmed: function (workspaceId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactionsNotConfirmed', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/not-confirmed"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetRecent: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetRecent', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/most-recent"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTransactionDetails: function (bankTransactionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetTransactionDetails', 'bankTransactionId', bankTransactionId);
                    localVarPath = "/bank/transactions/{bankTransactionId}"
                        .replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(bankTransactionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerUpdateTransaction: function (bankTransactionId, updateBankTransactionRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerUpdateTransaction', 'bankTransactionId', bankTransactionId);
                    // verify required parameter 'updateBankTransactionRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerUpdateTransaction', 'updateBankTransactionRequestDto', updateBankTransactionRequestDto);
                    localVarPath = "/bank/transactions/{bankTransactionId}"
                        .replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(bankTransactionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateBankTransactionRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionsApiAxiosParamCreator = BankTransactionsApiAxiosParamCreator;
/**
 * BankTransactionsApi - functional programming interface
 * @export
 */
var BankTransactionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [costCenterIds]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactions: function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, costCenterIds, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetBankTransactions(workspaceId, pageIndex, pageSize, accountIds, categoryIds, costCenterIds, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetBankTransactions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsNotConfirmed: function (workspaceId, pageIndex, pageSize, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetBankTransactionsNotConfirmed']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetRecent: function (workspaceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetRecent(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetRecent']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTransactionDetails: function (bankTransactionId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetTransactionDetails(bankTransactionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetTransactionDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerUpdateTransaction: function (bankTransactionId, updateBankTransactionRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerUpdateTransaction(bankTransactionId, updateBankTransactionRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerUpdateTransaction']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionsApiFp = BankTransactionsApiFp;
/**
 * BankTransactionsApi - factory interface
 * @export
 */
var BankTransactionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionsApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
            return localVarFp.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [costCenterIds]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactions: function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, costCenterIds, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, options) {
            return localVarFp.bankTransactionsControllerGetBankTransactions(workspaceId, pageIndex, pageSize, accountIds, categoryIds, costCenterIds, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsNotConfirmed: function (workspaceId, pageIndex, pageSize, options) {
            return localVarFp.bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetRecent: function (workspaceId, options) {
            return localVarFp.bankTransactionsControllerGetRecent(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTransactionDetails: function (bankTransactionId, options) {
            return localVarFp.bankTransactionsControllerGetTransactionDetails(bankTransactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerUpdateTransaction: function (bankTransactionId, updateBankTransactionRequestDto, options) {
            return localVarFp.bankTransactionsControllerUpdateTransaction(bankTransactionId, updateBankTransactionRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionsApiFactory = BankTransactionsApiFactory;
/**
 * BankTransactionsApi - object-oriented interface
 * @export
 * @class BankTransactionsApi
 * @extends {BaseAPI}
 */
var BankTransactionsApi = /** @class */ (function (_super) {
    __extends(BankTransactionsApi, _super);
    function BankTransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk = function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetBankTransactions = function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, costCenterIds, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetBankTransactions(workspaceId, pageIndex, pageSize, accountIds, categoryIds, costCenterIds, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetBankTransactionsNotConfirmed = function (workspaceId, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetRecent = function (workspaceId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetRecent(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetTransactionDetails = function (bankTransactionId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetTransactionDetails(bankTransactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerUpdateTransaction = function (bankTransactionId, updateBankTransactionRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerUpdateTransaction(bankTransactionId, updateBankTransactionRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionsApi;
}(base_1.BaseAPI));
exports.BankTransactionsApi = BankTransactionsApi;
/**
 * PluggyApi - axios parameter creator
 * @export
 */
var PluggyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreate: function (createPluggyConnectTokenRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'createPluggyConnectTokenRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('pluggyControllerCreate', 'createPluggyConnectTokenRequestDto', createPluggyConnectTokenRequestDto);
                    localVarPath = "/pluggy/connect-token";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPluggyConnectTokenRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/pluggy/webhook";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PluggyApiAxiosParamCreator = PluggyApiAxiosParamCreator;
/**
 * PluggyApi - functional programming interface
 * @export
 */
var PluggyApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PluggyApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreate: function (createPluggyConnectTokenRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pluggyControllerCreate(createPluggyConnectTokenRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PluggyApi.pluggyControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pluggyControllerWebhook(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PluggyApi.pluggyControllerWebhook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PluggyApiFp = PluggyApiFp;
/**
 * PluggyApi - factory interface
 * @export
 */
var PluggyApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PluggyApiFp)(configuration);
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreate: function (createPluggyConnectTokenRequestDto, options) {
            return localVarFp.pluggyControllerCreate(createPluggyConnectTokenRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function (options) {
            return localVarFp.pluggyControllerWebhook(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PluggyApiFactory = PluggyApiFactory;
/**
 * PluggyApi - object-oriented interface
 * @export
 * @class PluggyApi
 * @extends {BaseAPI}
 */
var PluggyApi = /** @class */ (function (_super) {
    __extends(PluggyApi, _super);
    function PluggyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    PluggyApi.prototype.pluggyControllerCreate = function (createPluggyConnectTokenRequestDto, options) {
        var _this = this;
        return (0, exports.PluggyApiFp)(this.configuration).pluggyControllerCreate(createPluggyConnectTokenRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    PluggyApi.prototype.pluggyControllerWebhook = function (options) {
        var _this = this;
        return (0, exports.PluggyApiFp)(this.configuration).pluggyControllerWebhook(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PluggyApi;
}(base_1.BaseAPI));
exports.PluggyApi = PluggyApi;
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
var ProfilesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'createProfileRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('profilesControllerCreate', 'createProfileRequestDto', createProfileRequestDto);
                    localVarPath = "/profiles";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createProfileRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/profiles/me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ProfilesApiAxiosParamCreator = ProfilesApiAxiosParamCreator;
/**
 * ProfilesApi - functional programming interface
 * @export
 */
var ProfilesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ProfilesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerCreate(createProfileRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProfilesApi.profilesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerGetMy(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProfilesApi.profilesControllerGetMy']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ProfilesApiFp = ProfilesApiFp;
/**
 * ProfilesApi - factory interface
 * @export
 */
var ProfilesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ProfilesApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto, options) {
            return localVarFp.profilesControllerCreate(createProfileRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function (options) {
            return localVarFp.profilesControllerGetMy(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ProfilesApiFactory = ProfilesApiFactory;
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
var ProfilesApi = /** @class */ (function (_super) {
    __extends(ProfilesApi, _super);
    function ProfilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.profilesControllerCreate = function (createProfileRequestDto, options) {
        var _this = this;
        return (0, exports.ProfilesApiFp)(this.configuration).profilesControllerCreate(createProfileRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.profilesControllerGetMy = function (options) {
        var _this = this;
        return (0, exports.ProfilesApiFp)(this.configuration).profilesControllerGetMy(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProfilesApi;
}(base_1.BaseAPI));
exports.ProfilesApi = ProfilesApi;
/**
 * StripeApi - axios parameter creator
 * @export
 */
var StripeApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerCreateCheckoutSessionForStripe: function (createStripeCheckoutSessionRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'createStripeCheckoutSessionRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('stripeControllerCreateCheckoutSessionForStripe', 'createStripeCheckoutSessionRequestDto', createStripeCheckoutSessionRequestDto);
                    localVarPath = "/stripe/checkout-session";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createStripeCheckoutSessionRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} stripeSignature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerStripeWebhook: function (stripeSignature, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'stripeSignature' is not null or undefined
                    (0, common_1.assertParamExists)('stripeControllerStripeWebhook', 'stripeSignature', stripeSignature);
                    localVarPath = "/stripe/webhook";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (stripeSignature != null) {
                        localVarHeaderParameter['stripe-signature'] = String(stripeSignature);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.StripeApiAxiosParamCreator = StripeApiAxiosParamCreator;
/**
 * StripeApi - functional programming interface
 * @export
 */
var StripeApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.StripeApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerCreateCheckoutSessionForStripe: function (createStripeCheckoutSessionRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stripeControllerCreateCheckoutSessionForStripe(createStripeCheckoutSessionRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StripeApi.stripeControllerCreateCheckoutSessionForStripe']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} stripeSignature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerStripeWebhook: function (stripeSignature, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stripeControllerStripeWebhook(stripeSignature, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StripeApi.stripeControllerStripeWebhook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.StripeApiFp = StripeApiFp;
/**
 * StripeApi - factory interface
 * @export
 */
var StripeApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.StripeApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerCreateCheckoutSessionForStripe: function (createStripeCheckoutSessionRequestDto, options) {
            return localVarFp.stripeControllerCreateCheckoutSessionForStripe(createStripeCheckoutSessionRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} stripeSignature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerStripeWebhook: function (stripeSignature, options) {
            return localVarFp.stripeControllerStripeWebhook(stripeSignature, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StripeApiFactory = StripeApiFactory;
/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
var StripeApi = /** @class */ (function (_super) {
    __extends(StripeApi, _super);
    function StripeApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    StripeApi.prototype.stripeControllerCreateCheckoutSessionForStripe = function (createStripeCheckoutSessionRequestDto, options) {
        var _this = this;
        return (0, exports.StripeApiFp)(this.configuration).stripeControllerCreateCheckoutSessionForStripe(createStripeCheckoutSessionRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} stripeSignature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    StripeApi.prototype.stripeControllerStripeWebhook = function (stripeSignature, options) {
        var _this = this;
        return (0, exports.StripeApiFp)(this.configuration).stripeControllerStripeWebhook(stripeSignature, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StripeApi;
}(base_1.BaseAPI));
exports.StripeApi = StripeApi;
/**
 * SubscriptionProductsApi - axios parameter creator
 * @export
 */
var SubscriptionProductsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionProductsControllerList: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('subscriptionProductsControllerList', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/subscription-products"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.SubscriptionProductsApiAxiosParamCreator = SubscriptionProductsApiAxiosParamCreator;
/**
 * SubscriptionProductsApi - functional programming interface
 * @export
 */
var SubscriptionProductsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SubscriptionProductsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionProductsControllerList: function (workspaceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subscriptionProductsControllerList(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SubscriptionProductsApi.subscriptionProductsControllerList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SubscriptionProductsApiFp = SubscriptionProductsApiFp;
/**
 * SubscriptionProductsApi - factory interface
 * @export
 */
var SubscriptionProductsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SubscriptionProductsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionProductsControllerList: function (workspaceId, options) {
            return localVarFp.subscriptionProductsControllerList(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SubscriptionProductsApiFactory = SubscriptionProductsApiFactory;
/**
 * SubscriptionProductsApi - object-oriented interface
 * @export
 * @class SubscriptionProductsApi
 * @extends {BaseAPI}
 */
var SubscriptionProductsApi = /** @class */ (function (_super) {
    __extends(SubscriptionProductsApi, _super);
    function SubscriptionProductsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionProductsApi
     */
    SubscriptionProductsApi.prototype.subscriptionProductsControllerList = function (workspaceId, options) {
        var _this = this;
        return (0, exports.SubscriptionProductsApiFp)(this.configuration).subscriptionProductsControllerList(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SubscriptionProductsApi;
}(base_1.BaseAPI));
exports.SubscriptionProductsApi = SubscriptionProductsApi;
/**
 * WorkspaceJoinRequestsApi - axios parameter creator
 * @export
 */
var WorkspaceJoinRequestsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/join-requests"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.WorkspaceJoinRequestsApiAxiosParamCreator = WorkspaceJoinRequestsApiAxiosParamCreator;
/**
 * WorkspaceJoinRequestsApi - functional programming interface
 * @export
 */
var WorkspaceJoinRequestsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkspaceJoinRequestsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent: function (workspaceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspaceJoinRequestsApi.workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.WorkspaceJoinRequestsApiFp = WorkspaceJoinRequestsApiFp;
/**
 * WorkspaceJoinRequestsApi - factory interface
 * @export
 */
var WorkspaceJoinRequestsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkspaceJoinRequestsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent: function (workspaceId, options) {
            return localVarFp.workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkspaceJoinRequestsApiFactory = WorkspaceJoinRequestsApiFactory;
/**
 * WorkspaceJoinRequestsApi - object-oriented interface
 * @export
 * @class WorkspaceJoinRequestsApi
 * @extends {BaseAPI}
 */
var WorkspaceJoinRequestsApi = /** @class */ (function (_super) {
    __extends(WorkspaceJoinRequestsApi, _super);
    function WorkspaceJoinRequestsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceJoinRequestsApi
     */
    WorkspaceJoinRequestsApi.prototype.workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent = function (workspaceId, options) {
        var _this = this;
        return (0, exports.WorkspaceJoinRequestsApiFp)(this.configuration).workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkspaceJoinRequestsApi;
}(base_1.BaseAPI));
exports.WorkspaceJoinRequestsApi = WorkspaceJoinRequestsApi;
/**
 * WorkspaceSubscriptionsApi - axios parameter creator
 * @export
 */
var WorkspaceSubscriptionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceSubscriptionsControllerGet: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('workspaceSubscriptionsControllerGet', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/subscription"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.WorkspaceSubscriptionsApiAxiosParamCreator = WorkspaceSubscriptionsApiAxiosParamCreator;
/**
 * WorkspaceSubscriptionsApi - functional programming interface
 * @export
 */
var WorkspaceSubscriptionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkspaceSubscriptionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceSubscriptionsControllerGet: function (workspaceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspaceSubscriptionsControllerGet(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspaceSubscriptionsApi.workspaceSubscriptionsControllerGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.WorkspaceSubscriptionsApiFp = WorkspaceSubscriptionsApiFp;
/**
 * WorkspaceSubscriptionsApi - factory interface
 * @export
 */
var WorkspaceSubscriptionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkspaceSubscriptionsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceSubscriptionsControllerGet: function (workspaceId, options) {
            return localVarFp.workspaceSubscriptionsControllerGet(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkspaceSubscriptionsApiFactory = WorkspaceSubscriptionsApiFactory;
/**
 * WorkspaceSubscriptionsApi - object-oriented interface
 * @export
 * @class WorkspaceSubscriptionsApi
 * @extends {BaseAPI}
 */
var WorkspaceSubscriptionsApi = /** @class */ (function (_super) {
    __extends(WorkspaceSubscriptionsApi, _super);
    function WorkspaceSubscriptionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceSubscriptionsApi
     */
    WorkspaceSubscriptionsApi.prototype.workspaceSubscriptionsControllerGet = function (workspaceId, options) {
        var _this = this;
        return (0, exports.WorkspaceSubscriptionsApiFp)(this.configuration).workspaceSubscriptionsControllerGet(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkspaceSubscriptionsApi;
}(base_1.BaseAPI));
exports.WorkspaceSubscriptionsApi = WorkspaceSubscriptionsApi;
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
var WorkspacesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'createWorkspaceRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerCreate', 'createWorkspaceRequestDto', createWorkspaceRequestDto);
                    localVarPath = "/workspaces";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWorkspaceRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerFetchUserRelatedWorkspaces: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/workspaces/related-to-me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.WorkspacesApiAxiosParamCreator = WorkspacesApiAxiosParamCreator;
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
var WorkspacesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkspacesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerCreate(createWorkspaceRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspacesApi.workspacesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerFetchUserRelatedWorkspaces: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerFetchUserRelatedWorkspaces(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspacesApi.workspacesControllerFetchUserRelatedWorkspaces']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.WorkspacesApiFp = WorkspacesApiFp;
/**
 * WorkspacesApi - factory interface
 * @export
 */
var WorkspacesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkspacesApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto, options) {
            return localVarFp.workspacesControllerCreate(createWorkspaceRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerFetchUserRelatedWorkspaces: function (options) {
            return localVarFp.workspacesControllerFetchUserRelatedWorkspaces(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkspacesApiFactory = WorkspacesApiFactory;
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
var WorkspacesApi = /** @class */ (function (_super) {
    __extends(WorkspacesApi, _super);
    function WorkspacesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.workspacesControllerCreate = function (createWorkspaceRequestDto, options) {
        var _this = this;
        return (0, exports.WorkspacesApiFp)(this.configuration).workspacesControllerCreate(createWorkspaceRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.workspacesControllerFetchUserRelatedWorkspaces = function (options) {
        var _this = this;
        return (0, exports.WorkspacesApiFp)(this.configuration).workspacesControllerFetchUserRelatedWorkspaces(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkspacesApi;
}(base_1.BaseAPI));
exports.WorkspacesApi = WorkspacesApi;
