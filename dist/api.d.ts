/**
 * Sofia Api
 * Api principal do sistema Sofia.
 *
 * The version of the OpenAPI document: 0.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AiChatFeatureSpecificationEntity
 */
export interface AiChatFeatureSpecificationEntity {
    /**
     *
     * @type {string}
     * @memberof AiChatFeatureSpecificationEntity
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof AiChatFeatureSpecificationEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof AiChatFeatureSpecificationEntity
     */
    'subscriptionProductId': string;
}
/**
 *
 * @export
 * @interface BankAccountEntity
 */
export interface BankAccountEntity {
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'bankConnectionId': string;
    /**
     *
     * @type {BankConnectionEntity}
     * @memberof BankAccountEntity
     */
    'bankConnection': BankConnectionEntity;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'providerAccountId': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'type': string;
    /**
     *
     * @type {boolean}
     * @memberof BankAccountEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'number': string;
    /**
     *
     * @type {number}
     * @memberof BankAccountEntity
     */
    'balance': number;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'currencyCode': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankAccountsBalanceReportEntity
 */
export interface BankAccountsBalanceReportEntity {
    /**
     *
     * @type {Array<BankAccountsBalanceReportItemEntity>}
     * @memberof BankAccountsBalanceReportEntity
     */
    'items': Array<BankAccountsBalanceReportItemEntity>;
    /**
     *
     * @type {Array<BankAccountEntity>}
     * @memberof BankAccountsBalanceReportEntity
     */
    'bankAccounts': Array<BankAccountEntity>;
}
/**
 *
 * @export
 * @interface BankAccountsBalanceReportItemEntity
 */
export interface BankAccountsBalanceReportItemEntity {
    /**
     *
     * @type {number}
     * @memberof BankAccountsBalanceReportItemEntity
     */
    'totalBalance': number;
    /**
     *
     * @type {string}
     * @memberof BankAccountsBalanceReportItemEntity
     */
    'currencyCode': string;
}
/**
 *
 * @export
 * @interface BankConnectionEntity
 */
export interface BankConnectionEntity {
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'createdByUserId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {boolean}
     * @memberof BankConnectionEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'providerItemId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'historyRange': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'connectorId': string;
    /**
     *
     * @type {BankConnectorEntity}
     * @memberof BankConnectionEntity
     */
    'connector': BankConnectorEntity;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankConnectionWithAccountsEntity
 */
export interface BankConnectionWithAccountsEntity {
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'createdByUserId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {Array<PlainBankAccountEntity>}
     * @memberof BankConnectionWithAccountsEntity
     */
    'accounts': Array<PlainBankAccountEntity>;
    /**
     *
     * @type {boolean}
     * @memberof BankConnectionWithAccountsEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'providerItemId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'historyRange': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'connectorId': string;
    /**
     *
     * @type {BankConnectorEntity}
     * @memberof BankConnectionWithAccountsEntity
     */
    'connector': BankConnectorEntity;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankConnectorEntity
 */
export interface BankConnectorEntity {
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'institutionUrl': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'imageUrl': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'primaryColor': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'country': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionCategoryEntity
 */
export interface BankTransactionCategoryEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryEntity
     */
    'parentId'?: string;
    /**
     *
     * @type {Array<BankTransactionCategoryPlainEntity>}
     * @memberof BankTransactionCategoryEntity
     */
    'path': Array<BankTransactionCategoryPlainEntity>;
    /**
     *
     * @type {Array<BankTransactionCategoryPlainEntity>}
     * @memberof BankTransactionCategoryEntity
     */
    'children': Array<BankTransactionCategoryPlainEntity>;
}
/**
 *
 * @export
 * @interface BankTransactionCategoryPlainEntity
 */
export interface BankTransactionCategoryPlainEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryPlainEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryPlainEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryPlainEntity
     */
    'parentId'?: string;
}
/**
 *
 * @export
 * @interface BankTransactionCostCenterEntity
 */
export interface BankTransactionCostCenterEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionCostCenterEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCostCenterEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCostCenterEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCostCenterEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCostCenterEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionCreditCardMetadataEntity
 */
export interface BankTransactionCreditCardMetadataEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'transactionId': string;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'installmentNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'totalInstallments'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'totalAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'payeeMCC'?: number;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'cardNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'billId'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionEntity
 */
export interface BankTransactionEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'accountId': string;
    /**
     *
     * @type {BankAccountEntity}
     * @memberof BankTransactionEntity
     */
    'account': BankAccountEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'provider': BankTransactionEntityProviderEnum;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'providerTransactionId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'originalDescription': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'postedDate': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'competencyDate': string;
    /**
     *
     * @type {number}
     * @memberof BankTransactionEntity
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'type': BankTransactionEntityTypeEnum;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'status': BankTransactionEntityStatusEnum;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'providerCategoryId'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'providerCategoryName'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'categoryId'?: string;
    /**
     *
     * @type {BankTransactionCategoryPlainEntity}
     * @memberof BankTransactionEntity
     */
    'category'?: BankTransactionCategoryPlainEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'costCenterId'?: string;
    /**
     *
     * @type {BankTransactionCostCenterEntity}
     * @memberof BankTransactionEntity
     */
    'costCenter'?: BankTransactionCostCenterEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'paymentDataId'?: string;
    /**
     *
     * @type {BankTransactionPaymentDataEntity}
     * @memberof BankTransactionEntity
     */
    'paymentData'?: BankTransactionPaymentDataEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'creditCardMetadataId'?: string;
    /**
     *
     * @type {BankTransactionCreditCardMetadataEntity}
     * @memberof BankTransactionEntity
     */
    'creditCardMetadata'?: BankTransactionCreditCardMetadataEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'bestGuessCategoryId'?: string;
    /**
     *
     * @type {BankTransactionCategoryPlainEntity}
     * @memberof BankTransactionEntity
     */
    'bestGuessCategory'?: BankTransactionCategoryPlainEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'ignoredAt'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'confirmedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'updatedAt': string;
}
export declare const BankTransactionEntityProviderEnum: {
    readonly Pluggy: "PLUGGY";
    readonly Sofia: "SOFIA";
};
export type BankTransactionEntityProviderEnum = typeof BankTransactionEntityProviderEnum[keyof typeof BankTransactionEntityProviderEnum];
export declare const BankTransactionEntityTypeEnum: {
    readonly Debit: "DEBIT";
    readonly Credit: "CREDIT";
};
export type BankTransactionEntityTypeEnum = typeof BankTransactionEntityTypeEnum[keyof typeof BankTransactionEntityTypeEnum];
export declare const BankTransactionEntityStatusEnum: {
    readonly Pending: "PENDING";
    readonly Posted: "POSTED";
};
export type BankTransactionEntityStatusEnum = typeof BankTransactionEntityStatusEnum[keyof typeof BankTransactionEntityStatusEnum];
/**
 *
 * @export
 * @interface BankTransactionPaymentDataEntity
 */
export interface BankTransactionPaymentDataEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'transactionId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payeerName'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'reason'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverName'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'paymentMethod'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'referenceNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverReferenceId'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionsPageEntity
 */
export interface BankTransactionsPageEntity {
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'pageIndex': number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'pageSize': number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'totalItems': number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'totalPages': number;
    /**
     *
     * @type {Array<BankTransactionEntity>}
     * @memberof BankTransactionsPageEntity
     */
    'items': Array<BankTransactionEntity>;
}
/**
 *
 * @export
 * @interface CashFlowByCategoryReportEntity
 */
export interface CashFlowByCategoryReportEntity {
    /**
     *
     * @type {Array<CashFlowByCategoryReportItemEntity>}
     * @memberof CashFlowByCategoryReportEntity
     */
    'items': Array<CashFlowByCategoryReportItemEntity>;
}
/**
 *
 * @export
 * @interface CashFlowByCategoryReportItemEntity
 */
export interface CashFlowByCategoryReportItemEntity {
    /**
     *
     * @type {string}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'categoryId': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'categoryName': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'absoluteValue': number;
    /**
     *
     * @type {number}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'percentage': number;
}
/**
 *
 * @export
 * @interface CashFlowReportDailyItemEntity
 */
export interface CashFlowReportDailyItemEntity {
    /**
     *
     * @type {number}
     * @memberof CashFlowReportDailyItemEntity
     */
    'index': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'date': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportDailyItemEntity
     */
    'dayOfYear': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'minDate': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'maxDate': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportDailyItemEntity
     */
    'value'?: number;
}
/**
 *
 * @export
 * @interface CashFlowReportEntity
 */
export interface CashFlowReportEntity {
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyBalanceItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyPostedIncomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyCompetencyIncomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyPostedOutcomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyCompetencyOutcomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyBalanceItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyPostedIncomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyCompetencyIncomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyPostedOutcomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyCompetencyOutcomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyBalanceItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyPostedIncomeItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyCompetencyIncomeItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyPostedOutcomeItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyCompetencyOutcomeItems': Array<CashFlowReportMonthlyItemEntity>;
}
/**
 *
 * @export
 * @interface CashFlowReportMonthlyItemEntity
 */
export interface CashFlowReportMonthlyItemEntity {
    /**
     *
     * @type {number}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'index': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'date': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'month': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'minDate': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'maxDate': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'value'?: number;
}
/**
 *
 * @export
 * @interface CashFlowReportWeeklyItemEntity
 */
export interface CashFlowReportWeeklyItemEntity {
    /**
     *
     * @type {number}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'index': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'date': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'week': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'minDate': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'maxDate': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'value'?: number;
}
/**
 *
 * @export
 * @interface CategoryGuessDto
 */
export interface CategoryGuessDto {
    /**
     *
     * @type {string}
     * @memberof CategoryGuessDto
     */
    'categoryId': string;
    /**
     *
     * @type {string}
     * @memberof CategoryGuessDto
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof CategoryGuessDto
     */
    'score': number;
    /**
     *
     * @type {string}
     * @memberof CategoryGuessDto
     */
    'origin': string;
}
/**
 *
 * @export
 * @interface CheckEmailInUseRequestDto
 */
export interface CheckEmailInUseRequestDto {
    /**
     *
     * @type {string}
     * @memberof CheckEmailInUseRequestDto
     */
    'email': string;
}
/**
 *
 * @export
 * @interface CheckoutSessionEntity
 */
export interface CheckoutSessionEntity {
    /**
     *
     * @type {string}
     * @memberof CheckoutSessionEntity
     */
    'url': string;
}
/**
 *
 * @export
 * @interface ConnectionFeatureSpecificationEntity
 */
export interface ConnectionFeatureSpecificationEntity {
    /**
     *
     * @type {string}
     * @memberof ConnectionFeatureSpecificationEntity
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof ConnectionFeatureSpecificationEntity
     */
    'unlimited': boolean;
    /**
     *
     * @type {number}
     * @memberof ConnectionFeatureSpecificationEntity
     */
    'max'?: number;
    /**
     *
     * @type {string}
     * @memberof ConnectionFeatureSpecificationEntity
     */
    'subscriptionProductId': string;
}
/**
 *
 * @export
 * @interface CreateBankTransactionCostCenterRequestDto
 */
export interface CreateBankTransactionCostCenterRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateBankTransactionCostCenterRequestDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankAccountRequestDto
 */
export interface CreateOrUpdateBankAccountRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'bankConnectionId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'providerAccountId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'number': string;
    /**
     *
     * @type {number}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'balance': number;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'currencyCode': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankConnectionRequestDto
 */
export interface CreateOrUpdateBankConnectionRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'createdByUserId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'providerItemId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'providerConnectorId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'historyRange': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankTransactionsInBulkItemDto
 */
export interface CreateOrUpdateBankTransactionsInBulkItemDto {
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'accountId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'providerTransactionId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'postedDate': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'competencyDate': string;
    /**
     *
     * @type {number}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'providerCategoryId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'providerCategoryName'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'categoryId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'costCenterId'?: string;
    /**
     *
     * @type {PaymentDataDto}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'paymentData': PaymentDataDto;
    /**
     *
     * @type {CreditCardMetadataDto}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'creditCardMetadata': CreditCardMetadataDto;
    /**
     *
     * @type {Array<CategoryGuessDto>}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'categoryGuesses': Array<CategoryGuessDto>;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'bestGuessCategoryId': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankTransactionsInBulkRequestDto
 */
export interface CreateOrUpdateBankTransactionsInBulkRequestDto {
    /**
     *
     * @type {Array<CreateOrUpdateBankTransactionsInBulkItemDto>}
     * @memberof CreateOrUpdateBankTransactionsInBulkRequestDto
     */
    'items': Array<CreateOrUpdateBankTransactionsInBulkItemDto>;
}
/**
 *
 * @export
 * @interface CreatePluggyConnectTokenRequestDto
 */
export interface CreatePluggyConnectTokenRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreatePluggyConnectTokenRequestDto
     */
    'itemId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePluggyConnectTokenRequestDto
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof CreatePluggyConnectTokenRequestDto
     */
    'historyRange': string;
}
/**
 *
 * @export
 * @interface CreateProfileRequestDto
 */
export interface CreateProfileRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateProfileRequestDto
     */
    'fullName': string;
    /**
     *
     * @type {string}
     * @memberof CreateProfileRequestDto
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof CreateProfileRequestDto
     */
    'birthDate': string;
}
/**
 *
 * @export
 * @interface CreateStripeCheckoutSessionRequestDto
 */
export interface CreateStripeCheckoutSessionRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateStripeCheckoutSessionRequestDto
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof CreateStripeCheckoutSessionRequestDto
     */
    'priceId': string;
    /**
     *
     * @type {boolean}
     * @memberof CreateStripeCheckoutSessionRequestDto
     */
    'isTrial': boolean;
}
/**
 *
 * @export
 * @interface CreateWorkspaceRequestDto
 */
export interface CreateWorkspaceRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'prettyId': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'type': string;
}
/**
 *
 * @export
 * @interface CredentialsEntity
 */
export interface CredentialsEntity {
    /**
     *
     * @type {string}
     * @memberof CredentialsEntity
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof CredentialsEntity
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof CredentialsEntity
     */
    'refreshToken': string;
}
/**
 *
 * @export
 * @interface CreditCardMetadataDto
 */
export interface CreditCardMetadataDto {
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'installmentNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'totalInstallments'?: number;
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'totalAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'payeeMCC'?: number;
    /**
     *
     * @type {string}
     * @memberof CreditCardMetadataDto
     */
    'cardNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof CreditCardMetadataDto
     */
    'billId'?: string;
}
/**
 *
 * @export
 * @interface EmailInUseEntity
 */
export interface EmailInUseEntity {
    /**
     *
     * @type {string}
     * @memberof EmailInUseEntity
     */
    'email': string;
    /**
     *
     * @type {boolean}
     * @memberof EmailInUseEntity
     */
    'inUse': boolean;
}
/**
 *
 * @export
 * @interface ErrorEntity
 */
export interface ErrorEntity {
    /**
     *
     * @type {string}
     * @memberof ErrorEntity
     */
    'fieldId': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ErrorEntity
     */
    'messages': Array<string>;
}
/**
 *
 * @export
 * @interface ExceptionResponseEntity
 */
export interface ExceptionResponseEntity {
    /**
     *
     * @type {number}
     * @memberof ExceptionResponseEntity
     */
    'statusCode': number;
    /**
     *
     * @type {string}
     * @memberof ExceptionResponseEntity
     */
    'message': string;
    /**
     *
     * @type {Array<ErrorEntity>}
     * @memberof ExceptionResponseEntity
     */
    'errors': Array<ErrorEntity>;
}
/**
 *
 * @export
 * @interface FinancialTransactionsFeatureSpecificationEntity
 */
export interface FinancialTransactionsFeatureSpecificationEntity {
    /**
     *
     * @type {string}
     * @memberof FinancialTransactionsFeatureSpecificationEntity
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof FinancialTransactionsFeatureSpecificationEntity
     */
    'unlimited': boolean;
    /**
     *
     * @type {number}
     * @memberof FinancialTransactionsFeatureSpecificationEntity
     */
    'maxPerMonth'?: number;
    /**
     *
     * @type {string}
     * @memberof FinancialTransactionsFeatureSpecificationEntity
     */
    'subscriptionProductId': string;
}
/**
 *
 * @export
 * @interface ParcialUpdateWorkspaceRequestDto
 */
export interface ParcialUpdateWorkspaceRequestDto {
    /**
     *
     * @type {string}
     * @memberof ParcialUpdateWorkspaceRequestDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface PaymentDataDto
 */
export interface PaymentDataDto {
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerName'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'reason'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverName'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'paymentMethod'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'referenceNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverReferenceId'?: string;
}
/**
 *
 * @export
 * @interface PaymentsManagerProductDataEntity
 */
export interface PaymentsManagerProductDataEntity {
    /**
     *
     * @type {string}
     * @memberof PaymentsManagerProductDataEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PaymentsManagerProductDataEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PaymentsManagerProductDataEntity
     */
    'description': string;
    /**
     *
     * @type {Array<PaymentsManagerProductPriceEntity>}
     * @memberof PaymentsManagerProductDataEntity
     */
    'prices': Array<PaymentsManagerProductPriceEntity>;
}
/**
 *
 * @export
 * @interface PaymentsManagerProductPriceEntity
 */
export interface PaymentsManagerProductPriceEntity {
    /**
     *
     * @type {string}
     * @memberof PaymentsManagerProductPriceEntity
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof PaymentsManagerProductPriceEntity
     */
    'active': boolean;
    /**
     *
     * @type {number}
     * @memberof PaymentsManagerProductPriceEntity
     */
    'unitAmount': number;
    /**
     *
     * @type {string}
     * @memberof PaymentsManagerProductPriceEntity
     */
    'interval': string;
}
/**
 *
 * @export
 * @interface PlainBankAccountEntity
 */
export interface PlainBankAccountEntity {
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'bankConnectionId': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'providerAccountId': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'type': string;
    /**
     *
     * @type {boolean}
     * @memberof PlainBankAccountEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'number': string;
    /**
     *
     * @type {number}
     * @memberof PlainBankAccountEntity
     */
    'balance': number;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'currencyCode': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface PluggyConnectTokenEntity
 */
export interface PluggyConnectTokenEntity {
    /**
     *
     * @type {string}
     * @memberof PluggyConnectTokenEntity
     */
    'accessToken': string;
}
/**
 *
 * @export
 * @interface ProfileEntity
 */
export interface ProfileEntity {
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'fullName': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'birthDate': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface RefreshRequestDto
 */
export interface RefreshRequestDto {
    /**
     *
     * @type {string}
     * @memberof RefreshRequestDto
     */
    'clientId': string;
}
/**
 *
 * @export
 * @interface SendEmailVerificationCodeRequestDto
 */
export interface SendEmailVerificationCodeRequestDto {
    /**
     *
     * @type {string}
     * @memberof SendEmailVerificationCodeRequestDto
     */
    'email': string;
}
/**
 *
 * @export
 * @interface SignInWithEmailPasswordRequestDto
 */
export interface SignInWithEmailPasswordRequestDto {
    /**
     *
     * @type {string}
     * @memberof SignInWithEmailPasswordRequestDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof SignInWithEmailPasswordRequestDto
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof SignInWithEmailPasswordRequestDto
     */
    'clientId': string;
}
/**
 *
 * @export
 * @interface SignUpWithEmailPasswordRequestDto
 */
export interface SignUpWithEmailPasswordRequestDto {
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailPasswordRequestDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailPasswordRequestDto
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailPasswordRequestDto
     */
    'emailVerificationCode': string;
}
/**
 *
 * @export
 * @interface SubscriptionProductEntity
 */
export interface SubscriptionProductEntity {
    /**
     *
     * @type {string}
     * @memberof SubscriptionProductEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SubscriptionProductEntity
     */
    'paymentSystem': string;
    /**
     *
     * @type {string}
     * @memberof SubscriptionProductEntity
     */
    'paymentSystemProductId': string;
    /**
     *
     * @type {string}
     * @memberof SubscriptionProductEntity
     */
    'workspaceType': string;
    /**
     *
     * @type {number}
     * @memberof SubscriptionProductEntity
     */
    'trialPeriodInDays'?: number;
    /**
     *
     * @type {boolean}
     * @memberof SubscriptionProductEntity
     */
    'trialAlreadyUsed'?: boolean;
    /**
     *
     * @type {ConnectionFeatureSpecificationEntity}
     * @memberof SubscriptionProductEntity
     */
    'connectionFeatureSpecification': ConnectionFeatureSpecificationEntity;
    /**
     *
     * @type {FinancialTransactionsFeatureSpecificationEntity}
     * @memberof SubscriptionProductEntity
     */
    'financialTransactionsFeatureSpecification': FinancialTransactionsFeatureSpecificationEntity;
    /**
     *
     * @type {AiChatFeatureSpecificationEntity}
     * @memberof SubscriptionProductEntity
     */
    'aiChatFeatureSpecification': AiChatFeatureSpecificationEntity;
    /**
     *
     * @type {PaymentsManagerProductDataEntity}
     * @memberof SubscriptionProductEntity
     */
    'paymentsManagerData': PaymentsManagerProductDataEntity;
}
/**
 *
 * @export
 * @interface UpdateBankTransactionRequestDto
 */
export interface UpdateBankTransactionRequestDto {
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'categoryId'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'costCenterId'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'competencyDate'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBankTransactionRequestDto
     */
    'ignore'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBankTransactionRequestDto
     */
    'confirm'?: boolean;
}
/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'passwordHash'?: string;
}
/**
 *
 * @export
 * @interface UserRelatedWorkspaceEntity
 */
export interface UserRelatedWorkspaceEntity {
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'prettyId': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'creatorUserId': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'relationType': string;
}
/**
 *
 * @export
 * @interface WorkspaceEntity
 */
export interface WorkspaceEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'prettyId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'creatorUserId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'selectedTreeId': string;
}
/**
 *
 * @export
 * @interface WorkspaceJoinRequestEntity
 */
export interface WorkspaceJoinRequestEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'createdAt': string;
}
/**
 *
 * @export
 * @interface WorkspaceSubscriptionEntity
 */
export interface WorkspaceSubscriptionEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspaceSubscriptionEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceSubscriptionEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceSubscriptionEntity
     */
    'subscriptionProductId': string;
    /**
     *
     * @type {SubscriptionProductEntity}
     * @memberof WorkspaceSubscriptionEntity
     */
    'subscriptionProduct': SubscriptionProductEntity;
    /**
     *
     * @type {string}
     * @memberof WorkspaceSubscriptionEntity
     */
    'status': WorkspaceSubscriptionEntityStatusEnum;
    /**
     *
     * @type {string}
     * @memberof WorkspaceSubscriptionEntity
     */
    'paymentSystem': WorkspaceSubscriptionEntityPaymentSystemEnum;
    /**
     *
     * @type {string}
     * @memberof WorkspaceSubscriptionEntity
     */
    'paymentSystemSubscriptionId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceSubscriptionEntity
     */
    'createdAt': string;
}
export declare const WorkspaceSubscriptionEntityStatusEnum: {
    readonly Active: "ACTIVE";
    readonly NotActive: "NOT_ACTIVE";
    readonly Trial: "TRIAL";
};
export type WorkspaceSubscriptionEntityStatusEnum = typeof WorkspaceSubscriptionEntityStatusEnum[keyof typeof WorkspaceSubscriptionEntityStatusEnum];
export declare const WorkspaceSubscriptionEntityPaymentSystemEnum: {
    readonly Stripe: "STRIPE";
};
export type WorkspaceSubscriptionEntityPaymentSystemEnum = typeof WorkspaceSubscriptionEntityPaymentSystemEnum[keyof typeof WorkspaceSubscriptionEntityPaymentSystemEnum];
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCheckEmailInUse: (checkEmailInUseRequestDto: CheckEmailInUseRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh: (refreshRequestDto: RefreshRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSendEmailVerificationCode: (sendEmailVerificationCodeRequestDto: SendEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignInWithEmailPassword: (signInWithEmailPasswordRequestDto: SignInWithEmailPasswordRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUpWithEmailPassword: (signUpWithEmailPasswordRequestDto: SignUpWithEmailPasswordRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCheckEmailInUse(checkEmailInUseRequestDto: CheckEmailInUseRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailInUseEntity>>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(refreshRequestDto: RefreshRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsEntity>>;
    /**
     *
     * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSendEmailVerificationCode(sendEmailVerificationCodeRequestDto: SendEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignInWithEmailPassword(signInWithEmailPasswordRequestDto: SignInWithEmailPasswordRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsEntity>>;
    /**
     *
     * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUpWithEmailPassword(signUpWithEmailPasswordRequestDto: SignUpWithEmailPasswordRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCheckEmailInUse(checkEmailInUseRequestDto: CheckEmailInUseRequestDto, options?: any): AxiosPromise<EmailInUseEntity>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(refreshRequestDto: RefreshRequestDto, options?: any): AxiosPromise<CredentialsEntity>;
    /**
     *
     * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSendEmailVerificationCode(sendEmailVerificationCodeRequestDto: SendEmailVerificationCodeRequestDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignInWithEmailPassword(signInWithEmailPasswordRequestDto: SignInWithEmailPasswordRequestDto, options?: any): AxiosPromise<CredentialsEntity>;
    /**
     *
     * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUpWithEmailPassword(signUpWithEmailPasswordRequestDto: SignUpWithEmailPasswordRequestDto, options?: any): AxiosPromise<UserEntity>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {CheckEmailInUseRequestDto} checkEmailInUseRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerCheckEmailInUse(checkEmailInUseRequestDto: CheckEmailInUseRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailInUseEntity, any>>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRefresh(refreshRequestDto: RefreshRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CredentialsEntity, any>>;
    /**
     *
     * @param {SendEmailVerificationCodeRequestDto} sendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerSendEmailVerificationCode(sendEmailVerificationCodeRequestDto: SendEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {SignInWithEmailPasswordRequestDto} signInWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerSignInWithEmailPassword(signInWithEmailPasswordRequestDto: SignInWithEmailPasswordRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CredentialsEntity, any>>;
    /**
     *
     * @param {SignUpWithEmailPasswordRequestDto} signUpWithEmailPasswordRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerSignUpWithEmailPassword(signUpWithEmailPasswordRequestDto: SignUpWithEmailPasswordRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserEntity, any>>;
}
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
export declare const BankAccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerActivateBankAccount: (bankAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateOrUpdateBankAccount: (workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: (workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerDisableBankAccount: (bankAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchConnectionBankAccounts: (workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchWorkspaceBankAccounts: (workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerGetBankAccountDetails: (bankAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
export declare const BankAccountsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerActivateBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateOrUpdateBankAccount(workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountsBalanceReportEntity>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerDisableBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchConnectionBankAccounts(workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountEntity>>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountEntity>>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerGetBankAccountDetails(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
};
/**
 * BankAccountsApi - factory interface
 * @export
 */
export declare const BankAccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerActivateBankAccount(bankAccountId: string, options?: any): AxiosPromise<BankAccountEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateOrUpdateBankAccount(workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: any): AxiosPromise<BankAccountEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId: string, enabled?: boolean, types?: string, options?: any): AxiosPromise<BankAccountsBalanceReportEntity>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerDisableBankAccount(bankAccountId: string, options?: any): AxiosPromise<BankAccountEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchConnectionBankAccounts(workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: any): AxiosPromise<Array<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId: string, enabled?: boolean, types?: string, options?: any): AxiosPromise<Array<BankAccountEntity>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerGetBankAccountDetails(bankAccountId: string, options?: any): AxiosPromise<BankAccountEntity>;
};
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
export declare class BankAccountsApi extends BaseAPI {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerActivateBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerCreateOrUpdateBankAccount(workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountsBalanceReportEntity, any>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerDisableBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerFetchConnectionBankAccounts(workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity[], any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity[], any>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerGetBankAccountDetails(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
}
/**
 * BankConnectionsApi - axios parameter creator
 * @export
 */
export declare const BankConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerActivateBankConnection: (bankConnectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerCreateOrUpdateBankConnection: (workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerDisableBankConnection: (bankConnectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerFetchUserBankConnections: (workspaceId: string, enabled?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerGetBankConnectionDetails: (bankConnectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankConnectionsApi - functional programming interface
 * @export
 */
export declare const BankConnectionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerActivateBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionEntity>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerDisableBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerFetchUserBankConnections(workspaceId: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankConnectionWithAccountsEntity>>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerGetBankConnectionDetails(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionWithAccountsEntity>>;
};
/**
 * BankConnectionsApi - factory interface
 * @export
 */
export declare const BankConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerActivateBankConnection(bankConnectionId: string, options?: any): AxiosPromise<BankConnectionEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: any): AxiosPromise<BankConnectionEntity>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerDisableBankConnection(bankConnectionId: string, options?: any): AxiosPromise<BankConnectionEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerFetchUserBankConnections(workspaceId: string, enabled?: boolean, options?: any): AxiosPromise<Array<BankConnectionWithAccountsEntity>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerGetBankConnectionDetails(bankConnectionId: string, options?: any): AxiosPromise<BankConnectionWithAccountsEntity>;
};
/**
 * BankConnectionsApi - object-oriented interface
 * @export
 * @class BankConnectionsApi
 * @extends {BaseAPI}
 */
export declare class BankConnectionsApi extends BaseAPI {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerActivateBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionEntity, any>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerDisableBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerFetchUserBankConnections(workspaceId: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionWithAccountsEntity[], any>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerGetBankConnectionDetails(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionWithAccountsEntity, any>>;
}
/**
 * BankTransactionCategoriesApi - axios parameter creator
 * @export
 */
export declare const BankTransactionCategoriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories: (workspaceId: string, onlyLeafs?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankTransactionCategoriesApi - functional programming interface
 * @export
 */
export declare const BankTransactionCategoriesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId: string, onlyLeafs?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionCategoryEntity>>>;
};
/**
 * BankTransactionCategoriesApi - factory interface
 * @export
 */
export declare const BankTransactionCategoriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId: string, onlyLeafs?: boolean, options?: any): AxiosPromise<Array<BankTransactionCategoryEntity>>;
};
/**
 * BankTransactionCategoriesApi - object-oriented interface
 * @export
 * @class BankTransactionCategoriesApi
 * @extends {BaseAPI}
 */
export declare class BankTransactionCategoriesApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCategoriesApi
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId: string, onlyLeafs?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionCategoryEntity[], any>>;
}
/**
 * BankTransactionCostCentersApi - axios parameter creator
 * @export
 */
export declare const BankTransactionCostCentersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCostCentersControllerCreateCostCenter: (workspaceId: string, createBankTransactionCostCenterRequestDto: CreateBankTransactionCostCenterRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCostCentersControllerListCostCenters: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankTransactionCostCentersApi - functional programming interface
 * @export
 */
export declare const BankTransactionCostCentersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCostCentersControllerCreateCostCenter(workspaceId: string, createBankTransactionCostCenterRequestDto: CreateBankTransactionCostCenterRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionCostCenterEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCostCentersControllerListCostCenters(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionCostCenterEntity>>>;
};
/**
 * BankTransactionCostCentersApi - factory interface
 * @export
 */
export declare const BankTransactionCostCentersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCostCentersControllerCreateCostCenter(workspaceId: string, createBankTransactionCostCenterRequestDto: CreateBankTransactionCostCenterRequestDto, options?: any): AxiosPromise<BankTransactionCostCenterEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCostCentersControllerListCostCenters(workspaceId: string, options?: any): AxiosPromise<Array<BankTransactionCostCenterEntity>>;
};
/**
 * BankTransactionCostCentersApi - object-oriented interface
 * @export
 * @class BankTransactionCostCentersApi
 * @extends {BaseAPI}
 */
export declare class BankTransactionCostCentersApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionCostCenterRequestDto} createBankTransactionCostCenterRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCostCentersApi
     */
    bankTransactionCostCentersControllerCreateCostCenter(workspaceId: string, createBankTransactionCostCenterRequestDto: CreateBankTransactionCostCenterRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionCostCenterEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCostCentersApi
     */
    bankTransactionCostCentersControllerListCostCenters(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionCostCenterEntity[], any>>;
}
/**
 * BankTransactionsApi - axios parameter creator
 * @export
 */
export declare const BankTransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: (createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactions: (workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, costCenterIds?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed: (workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetRecent: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetTransactionDetails: (bankTransactionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerUpdateTransaction: (bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankTransactionsApi - functional programming interface
 * @export
 */
export declare const BankTransactionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionEntity>>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactions(workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, costCenterIds?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionsPageEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionsPageEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetRecent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionEntity>>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetTransactionDetails(bankTransactionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionEntity>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerUpdateTransaction(bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionEntity>>;
};
/**
 * BankTransactionsApi - factory interface
 * @export
 */
export declare const BankTransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: any): AxiosPromise<Array<BankTransactionEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactions(workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, costCenterIds?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, options?: any): AxiosPromise<BankTransactionsPageEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: any): AxiosPromise<BankTransactionsPageEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetRecent(workspaceId: string, options?: any): AxiosPromise<Array<BankTransactionEntity>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetTransactionDetails(bankTransactionId: string, options?: any): AxiosPromise<BankTransactionEntity>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerUpdateTransaction(bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: any): AxiosPromise<BankTransactionEntity>;
};
/**
 * BankTransactionsApi - object-oriented interface
 * @export
 * @class BankTransactionsApi
 * @extends {BaseAPI}
 */
export declare class BankTransactionsApi extends BaseAPI {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity[], any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetBankTransactions(workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, costCenterIds?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionsPageEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionsPageEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetRecent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity[], any>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetTransactionDetails(bankTransactionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity, any>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerUpdateTransaction(bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity, any>>;
}
/**
 * PluggyApi - axios parameter creator
 * @export
 */
export declare const PluggyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerCreate: (createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerWebhook: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PluggyApi - functional programming interface
 * @export
 */
export declare const PluggyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerCreate(createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluggyConnectTokenEntity>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerWebhook(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PluggyApi - factory interface
 * @export
 */
export declare const PluggyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerCreate(createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: any): AxiosPromise<PluggyConnectTokenEntity>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerWebhook(options?: any): AxiosPromise<void>;
};
/**
 * PluggyApi - object-oriented interface
 * @export
 * @class PluggyApi
 * @extends {BaseAPI}
 */
export declare class PluggyApi extends BaseAPI {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    pluggyControllerCreate(createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PluggyConnectTokenEntity, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    pluggyControllerWebhook(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export declare const ProfilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerCreate: (createProfileRequestDto: CreateProfileRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerGetMy: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProfilesApi - functional programming interface
 * @export
 */
export declare const ProfilesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerCreate(createProfileRequestDto: CreateProfileRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEntity>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerGetMy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEntity>>;
};
/**
 * ProfilesApi - factory interface
 * @export
 */
export declare const ProfilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerCreate(createProfileRequestDto: CreateProfileRequestDto, options?: any): AxiosPromise<ProfileEntity>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerGetMy(options?: any): AxiosPromise<ProfileEntity>;
};
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export declare class ProfilesApi extends BaseAPI {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    profilesControllerCreate(createProfileRequestDto: CreateProfileRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProfileEntity, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    profilesControllerGetMy(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProfileEntity, any>>;
}
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export declare const ReportsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsEntriesByCategoryReport: (workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsOutputsByCategoryReport: (workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsCashFlowReport: (workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsOutputsByCategoryReport: (workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCashFlowReport: (workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetFinancialStatementReport: (workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReportsApi - functional programming interface
 * @export
 */
export declare const ReportsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsEntriesByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowByCategoryReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsOutputsByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowByCategoryReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsOutputsByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetFinancialStatementReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportEntity>>;
};
/**
 * ReportsApi - factory interface
 * @export
 */
export declare const ReportsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsEntriesByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: any): AxiosPromise<CashFlowByCategoryReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsOutputsByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: any): AxiosPromise<CashFlowByCategoryReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: any): AxiosPromise<CashFlowReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsOutputsByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: any): AxiosPromise<CashFlowReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, options?: any): AxiosPromise<CashFlowReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetFinancialStatementReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: any): AxiosPromise<CashFlowReportEntity>;
};
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export declare class ReportsApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetAccountsEntriesByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowByCategoryReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetAccountsOutputsByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowByCategoryReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetCardsCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetCardsOutputsByCategoryReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, costCenterIds?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [costCenterIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetFinancialStatementReport(workspaceId: string, accountIds?: string, costCenterIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowReportEntity, any>>;
}
/**
 * StripeApi - axios parameter creator
 * @export
 */
export declare const StripeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerCreateCheckoutSessionForStripe: (createStripeCheckoutSessionRequestDto: CreateStripeCheckoutSessionRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} stripeSignature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerStripeWebhook: (stripeSignature: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StripeApi - functional programming interface
 * @export
 */
export declare const StripeApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerCreateCheckoutSessionForStripe(createStripeCheckoutSessionRequestDto: CreateStripeCheckoutSessionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSessionEntity>>;
    /**
     *
     * @param {string} stripeSignature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerStripeWebhook(stripeSignature: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * StripeApi - factory interface
 * @export
 */
export declare const StripeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerCreateCheckoutSessionForStripe(createStripeCheckoutSessionRequestDto: CreateStripeCheckoutSessionRequestDto, options?: any): AxiosPromise<CheckoutSessionEntity>;
    /**
     *
     * @param {string} stripeSignature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerStripeWebhook(stripeSignature: string, options?: any): AxiosPromise<void>;
};
/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export declare class StripeApi extends BaseAPI {
    /**
     *
     * @param {CreateStripeCheckoutSessionRequestDto} createStripeCheckoutSessionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    stripeControllerCreateCheckoutSessionForStripe(createStripeCheckoutSessionRequestDto: CreateStripeCheckoutSessionRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckoutSessionEntity, any>>;
    /**
     *
     * @param {string} stripeSignature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    stripeControllerStripeWebhook(stripeSignature: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SubscriptionProductsApi - axios parameter creator
 * @export
 */
export declare const SubscriptionProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscriptionProductsControllerList: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SubscriptionProductsApi - functional programming interface
 * @export
 */
export declare const SubscriptionProductsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscriptionProductsControllerList(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubscriptionProductEntity>>>;
};
/**
 * SubscriptionProductsApi - factory interface
 * @export
 */
export declare const SubscriptionProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    subscriptionProductsControllerList(workspaceId: string, options?: any): AxiosPromise<Array<SubscriptionProductEntity>>;
};
/**
 * SubscriptionProductsApi - object-oriented interface
 * @export
 * @class SubscriptionProductsApi
 * @extends {BaseAPI}
 */
export declare class SubscriptionProductsApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionProductsApi
     */
    subscriptionProductsControllerList(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionProductEntity[], any>>;
}
/**
 * WorkspaceJoinRequestsApi - axios parameter creator
 * @export
 */
export declare const WorkspaceJoinRequestsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspaceJoinRequestsApi - functional programming interface
 * @export
 */
export declare const WorkspaceJoinRequestsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceJoinRequestEntity>>;
};
/**
 * WorkspaceJoinRequestsApi - factory interface
 * @export
 */
export declare const WorkspaceJoinRequestsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId: string, options?: any): AxiosPromise<WorkspaceJoinRequestEntity>;
};
/**
 * WorkspaceJoinRequestsApi - object-oriented interface
 * @export
 * @class WorkspaceJoinRequestsApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceJoinRequestsApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceJoinRequestsApi
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceJoinRequestEntity, any>>;
}
/**
 * WorkspaceSubscriptionsApi - axios parameter creator
 * @export
 */
export declare const WorkspaceSubscriptionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceSubscriptionsControllerGet: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspaceSubscriptionsApi - functional programming interface
 * @export
 */
export declare const WorkspaceSubscriptionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceSubscriptionsControllerGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceSubscriptionEntity>>;
};
/**
 * WorkspaceSubscriptionsApi - factory interface
 * @export
 */
export declare const WorkspaceSubscriptionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceSubscriptionsControllerGet(workspaceId: string, options?: any): AxiosPromise<WorkspaceSubscriptionEntity>;
};
/**
 * WorkspaceSubscriptionsApi - object-oriented interface
 * @export
 * @class WorkspaceSubscriptionsApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceSubscriptionsApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceSubscriptionsApi
     */
    workspaceSubscriptionsControllerGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceSubscriptionEntity, any>>;
}
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
export declare const WorkspacesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerCreate: (createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerFetchUserRelatedWorkspaces: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerGet: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerParcialUpdate: (workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export declare const WorkspacesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerCreate(createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceEntity>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerFetchUserRelatedWorkspaces(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRelatedWorkspaceEntity>>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerParcialUpdate(workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceEntity>>;
};
/**
 * WorkspacesApi - factory interface
 * @export
 */
export declare const WorkspacesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerCreate(createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: any): AxiosPromise<WorkspaceEntity>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerFetchUserRelatedWorkspaces(options?: any): AxiosPromise<Array<UserRelatedWorkspaceEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerGet(workspaceId: string, options?: any): AxiosPromise<WorkspaceEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerParcialUpdate(workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: any): AxiosPromise<WorkspaceEntity>;
};
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesApi extends BaseAPI {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerCreate(createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceEntity, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerFetchUserRelatedWorkspaces(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRelatedWorkspaceEntity[], any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerParcialUpdate(workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceEntity, any>>;
}
